#include <iostream>
/**图定义：
 * 构成：顶点集V、边集E，记为G=(V, E)；
 * V(G): 图G中顶点的有限非空集；
 * E(G): G中顶点之间的关系边集合；
 * |V|表示G中顶点个数，G的阶；
 * |E|表示G中边的条数
 *
 * 线性表可以空，树可以空，图不可以空(V一定是非空集)图的边可以空
 * 无向图的边的集合用圆括号包起，
 * 有向图用尖括号包起，如<v,w>，其中v和w是顶点，v是弧尾，w是弧头，<v,w>是顶点v到w的弧，称v邻接到w/w邻接自v
 * */
 /**
  * 顶点的度、入度、出度
  * 无向图：顶点v的度是依附于该顶点的边的条数，记TD(v)；度之和为sumTD(v)=2|e|
  * 有向图：入度：以v为重点的有向边的数目，记ID(v)；出度：v为起点，记OD(v)；
  *             度之和为sumID(v)=sumOd(v)=e
  * 顶点-顶点关系描述：
  * 路径：vp-vq之间的一条路径是顶点序列：vp,vi1,vi2,...,vq，无向图没有方向，有向图有方向限制
  * 回路：第一个点和最后一个点相同的路径
  * 简单路径：一个路径中，顶点不重复出现的路径
  * 简单回路：出第一个和最后一个顶点，其余点不重复出现
  * 路径长度指边的数目
  * 点到点距离：点到点的最短路径存在，则该路径为点到点距离，若不存在，则距离无穷
  * 无向图中顶点之间有路径就是连通的，有向图中两顶点之间既有正向也有反向路径则是强连通
  * 连通图：无向图中任意两个顶点都连通，有向图任何一对顶点都是强连通的则是强连通图
  * 连通图考点：n个顶点的无向图G，若G是连通图，则最少有n-1条边，G是非连通，则最多可能有C(2 n-1)条边
  * 强连通图考点：n个顶点的有向图G，若G是强连通图，则最少有n条边(形成回路)
  *
  * 子图：若图G'=(V', E')，则有V' E' 分别是V E的子集，则G'是G的子图
  * 生成子图：G'包含G中 所有 顶点的图
  * #连通分量： 无向图中的极大连通子图称为连通分量，子图必须连通且包含尽可能多的顶点和边
  *                     有向图中的极大强连通子图称为有向图的强连通分量，子图必须强连通同时保留尽可能多的边
  *
  * 生成树：连通图的生成树是包含图中全部顶点的一个极小的连通子图，边尽可能少但保持连通
  * 生成森林：非连通无向图，连通分量的生成树构成了非连通图的生成森林
  *
  * 无向完全图：任意两顶点之间都连通，顶点|V|=n，则|E|∈[C(2 n)]=[0,n(n-1)/2]
  * 有向完全图：任意两个顶点之间都存在方向相反的两条弧。|E|∈[0, n(n-1)]
  * 稀疏图与稠密图：一般来说|E|<|V|log|V|可以将G视为稀疏图
  *
  * n个顶点的树，必有n-1条边，n个顶点的图，|E|>n-1，则必有回路
  * */
int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}












